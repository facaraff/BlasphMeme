package applications.CEC2011;

import interfaces.Problem;
import utils.MatLab;

public class P11_ELD5 extends Problem {
	
	int powerDemand=49342;
	
	double[] pMin= {71,120,125,125,90,90,280,280,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,280,280,280,280,260,260,260,260,260,260,260,260,120,120,423,423,3,3,160,160,160,160,160,160,160,160,165,165,165,165,180,180,103,198,100,153,163,95,160,160,196,196,196,196,130,130,137,137,195,175,175,175,175,330,160,160,200,56,115,115,115,207,207,175,175,175,175,360,415,795,795,578,615,612,612,758,755,750,750,713,718,791,786,795,795,795,795,94,94,94,244,244,244,95,95,116,175,2,4,15,9,12,10,112,4,5,5,50,5,42,42,41,17,7,7,26};
	double[] pMax= {119,189,190,190,190,190,490,490,496,496,496,496,506,509,506,505,506,506,505,505,505,505,505,505,537,537,549,549,501,501,506,506,506,506,500,500,241,241,774,769,19,28,250,250,250,250,250,250,250,250,504,504,504,504,471,561,341,617,312,471,500,302,511,511,490,490,490,490,432,432,455,455,541,536,540,538,540,574,531,531,542,132,245,245,245,307,307,345,345,345,345,580,645,984,978,682,720,718,720,964,958,1007,1006,1013,1020,954,952,1006,1013,1021,1015,203,203,203,379,379,379,190,189,194,321,19,59,83,53,37,34,373,20,38,19,98,10,74,74,105,51,19,19,40};
	
	
	double[] a= {0.032888,0.0082800,0.0038490,0.0038490,0.042468,0.014992,0.0070390,0.0030790,0.0050630,0.0050630,0.0050630,0.0035520,0.0039010,0.0039010,0.0039010,0.0039010,0.0023930,0.0023930,0.0036840,0.0036840,0.0036840,0.0036840,0.0040040,0.0036840,0.0016190,0.0050930,0.00099300,0.00099300,0.0024730,0.0025470,0.0035420,0.0035420,0.0035420,0.0035420,0.0031320,0.0013230,0.0029500,0.0029500,0.00099100,0.0015810,0.90236,0.1102950000,0.024493,0.029156,0.024667,0.016517,0.026584,0.0075400,0.016430,0.045934,4.4000e-05,4.4000e-05,4.4000e-05,4.4000e-05,0.0025280,0.00013100,0.010372,0.0076270,0.012464,0.039441,0.0072780,4.4000e-05,4.4000e-05,4.4000e-05,0.018827,0.010852,0.018827,0.018827,0.034560,0.081540,0.023534,0.035475,0.00091500,4.4000e-05,4.4000e-05,0.0013070,0.00039200,8.7000e-05,0.00052100,0.00049800,0.0010460,0.13205,0.096968,0.054868,0.054868,0.014382,0.013161,0.016033,0.013653,0.028148,0.013470,6.4000e-05,0.00025200,2.2000e-05,2.2000e-05,0.00020300,0.00019800,0.00021500,0.00021800,0.00019300,0.00019700,0.00032400,0.00034400,0.00069000,0.00065000,0.00023300,0.00023900,0.00026100,0.00025900,0.00070700,0.00078600,0.014355,0.014355,0.014355,0.030266,0.030266,0.030266,0.024027,0.0015800,0.022095,0.076810,0.9534430000,4.4000e-05,0.072468,0.00044800,0.5991120000,0.2447060000,4.2000e-05,0.085145,0.5247180000,0.1765150000,0.063414,2.740485000,0.1124380000,0.041529,0.00091100,0.0052450,0.2347870000,0.2347870000,1.111878000};
	double[] c= {1220.645000,1315.118000,874.2880000,874.2880000,1976.469000,1338.087000,1818.299000,1133.978000,1320.636000,1320.636000,1320.636000,1106.539000,1176.504000,1176.504000,1176.504000,1176.504000,1017.406000,1017.406000,1229.131000,1229.131000,1229.131000,1229.131000,1267.894000,1229.131000,975.9260000,1532.093000,641.9890000,641.9890000,911.5330000,910.5330000,1074.810000,1074.810000,1074.810000,1074.810000,1278.460000,861.7420000,408.8340000,408.8340000,1288.815000,1436.251000,699.9880000,134.5440000,3427.912000,3751.772000,3918.780000,3379.580000,3345.296000,3138.754000,3453.050000,5119.3,1898.415000,1898.415000,1898.415000,1898.415000,2473.390000,2781.705000,5515.508000,3478.3,6240.909000,9960.110000,3671.997000,1837.383000,3108.395000,3108.395000,7095.484000,3392.732000,7095.484000,7095.484000,4288.320000,13813.00100,4435.493000,9750.750000,1042.366000,1159.895000,1159.895000,1303.990000,1156.193000,2118.968000,779.5190000,829.8880000,2333.690000,2028.954000,4412.017000,2982.219000,2982.219000,3174.939000,3218.359000,3723.822000,3551.405000,4332.615000,3493.739000,226.7990000,382.9320000,156.9870000,154.4840000,332.8340000,326.5990000,345.3060000,350.3720000,370.3770000,367.0670000,124.8750000,130.7850000,878.7460000,827.9590000,432.0070000,445.6060000,467.2230000,475.94,899.4620000,1000.367000,1269.132000,1269.132000,1269.132000,4965.124000,4965.124000,4965.124000,2243.185000,2290.381000,1681.533000,6743.302000,394.3980000,1243.165000,1454.740000,1011.051000,909.2690000,689.3780000,1443.792000,535.5530000,617.7340000,90.966,974.4470000,263.81,1335.594000,1033.871000,1391.325000,4477.110000,57.794,57.794,1258.437000};
	double[] b= {61.242,41.095,46.310,46.310,54.242,61.215,11.791,15.055,13.226,13.226,13.226,14.498,14.651,14.651,14.651,14.651,15.669,15.669,14.656,14.656,14.656,14.656,14.378,14.656,16.261,13.362,17.203,17.203,15.274,15.212,15.033,15.033,15.033,15.033,13.992,15.679,16.542,16.542,16.518,15.815,75.464,129.5440000,56.613,54.451,54.736,58.034,55.981,61.520,58.635,44.647,71.584,71.584,71.584,71.584,85.120,87.682,69.532,78.339,58.172,46.636,76.947,80.761,70.136,70.136,49.840,65.404,49.840,49.840,66.465,22.941,64.314,45.017,70.644,70.959,70.959,70.302,70.662,71.101,37.854,37.768,67.983,77.838,63.671,79.458,79.458,93.966,94.723,66.919,68.185,60.821,68.551,2.8420,2.9460,3.0960,3.0400,1.7090,1.6680,1.7890,1.8150,2.7260,2.7320,2.6510,2.7980,1.5950,1.5030,2.4250,2.4990,2.6740,2.6920,1.6330,1.8160,89.830,89.830,89.830,64.125,64.125,64.125,76.129,81.805,81.140,46.665,78.412,112.0880000,90.871,97.116,83.244,95.665,91.202,104.5010000,83.015,127.7950000,77.929,92.779,80.950,89.073,161.2880000,161.8290000,84.972,84.972,16.087};
	double[] e= {0,0,0,0,700,0,0,0,0,600,0,0,0,0,800,0,0,0,0,0,0,600,0,0,0,0,0,0,0,0,0,0,600,0,0,0,0,0,0,600,0,0,0,0,0,0,0,0,0,0,0,1100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1200,0,1000,0,0,0,0,0,0,0,0,0,0,0,1000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,600,0,1200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	double[] f= {0,0,0,0,0.080000,0,0,0,0,0.055000,0,0,0,0,0.060000,0,0,0,0,0,0,0.050000,0,0,0,0,0,0,0,0,0,0,0.043000,0,0,0,0,0,0,0.043000,0,0,0,0,0,0,0,0,0,0,0,0.043000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.030000,0,0.050000,0,0,0,0,0,0,0,0,0,0,0,0.050000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.070000,0,0.043000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	double[] po= {98.400,134,141.50,183.30,125,91.300,401.10,329.50,386.10,427.30,412.20,370.10,301.80,368,301.90,476.40,283.10,414.10,328,389.40,354.70,262,461.50,371.60,462.60,379.20,530.80,391.90,480.10,319,329.50,333.80,390,432,402,428,178.40,194.10,474,609.80,17.800,6.9000,224.30,210,212,200.80,220,232.90,168,208.40,443.90,426,434.10,402.50,357.40,423,220,369.40,273.50,336,432,220,410.60,422.70,351,296,411.10,263.20,370.30,418.70,409.60,412,423.20,428,436,428,425,497.20,510,470,464.10,118.10,141.30,132,135,252,221,245.90,247.90,183.60,288,557.40,529.50,800.80,801.50,582.70,680.70,670.70,651.70,921,916.80,911.90,898,905,846.50,850.90,843.70,841.40,835.70,828.80,846,179,120.80,121,317.40,318.40,335.80,151,129.50,130,218.90,5.4000,45,20,16.300,20,22.100,125,10,13,7.5000,53.200,6.4000,69.100,49.900,91,41,13.700,7.4000,28.600};
	double[] upRamp= {30,30,60,60,150,150,180,180,300,300,300,300,600,600,600,600,600,600,600,600,600,600,600,600,300,300,360,360,180,180,600,600,600,600,660,900,180,180,600,600,210,366,702,702,702,702,702,702,702,702,1350,1350,1350,1350,1350,720,720,2700,1500,1656,2160,900,1200,1200,1014,1014,1014,1014,1350,1350,1350,1350,780,1650,1650,1650,1650,1620,1482,1482,1668,120,180,120,120,120,120,318,318,318,318,18,18,36,36,138,144,144,144,48,48,36,36,30,30,30,30,36,36,36,36,120,120,120,480,480,480,240,240,120,180,90,90,300,162,114,120,1080,60,66,12,300,6,60,60,528,300,18,18,72};
	double[] downRamp= {120,120,60,60,150,150,300,300,510,510,510,510,600,600,600,600,600,600,600,600,600,600,600,600,300,300,360,360,180,180,600,600,600,600,660,900,180,180,600,600,210,366,702,702,702,702,702,702,702,702,1350,1350,1350,1350,1350,720,720,2700,1500,1656,2160,900,1200,1200,1014,1014,1014,1014,1350,1350,1350,1350,780,1650,1650,1650,1650,1620,1482,1482,1668,120,180,180,180,180,180,318,318,318,318,18,18,36,36,204,216,216,216,48,48,54,54,30,30,30,30,36,36,36,36,120,120,120,480,480,480,240,240,120,180,90,90,300,162,114,120,1080,60,66,6,300,6,60,60,528,300,30,30,120};
	
	double[] poZ1LowerLim= {0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,220,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0};
	double[] poZ1UpperLim= {0,0,0,0,0,0,0,280,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,250,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0};
	double[] poZ2LowerLim= {0,0,0,0,0,0,0,305,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,365,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,0};
	double[] poZ2UpperLim= {0,0,0,0,0,0,0,335,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,395,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,0};
	double[] poZ3LowerLim= {0,0,0,0,0,0,0,420,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,430,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	double[] poZ3UpperLim= {0,0,0,0,0,0,0,450,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,420,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,455,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	
	public P11_ELD5() {
		
		super(140);
		
		this.setBounds(generateBounds(getDimension()));
		
	}
	
	
	public double f(double[] x) throws Exception {
	
		
		double capacityLimitsPenalty = 0;
		double powerBalancePenalty =0;
		double rampLimitPenalty= 0;
		double pozPenality=0;
		
		double currentCost=0;
					
		//Power Balance Penalty Calculation				
		powerBalancePenalty += Math.abs(powerDemand-MatLab.sum(x));
					
		//Capacity Limits Penalty Calculation
		for(int i=0; i<x.length; i++) {
			capacityLimitsPenalty += Math.abs(x[i]-pMin[i]) 
					- (x[i]-pMin[i]) + Math.abs(pMax[i]-x[i]) 
					-(pMax[i]-x[i]); 
		}
		
		//Ramp Rate Limits Penalty Calculation	
		for(int i=0; i<x.length; i++) {
			double upRampLim = Math.min(pMax[i], po[i]+upRamp[i]);
			double downRampLim = Math.max(pMin[i], po[i]-downRamp[i]);
			rampLimitPenalty += Math.abs(x[i]-downRampLim)-(x[i]-downRampLim)
					+ Math.abs(upRampLim-x[i])-(upRampLim-x[i]);
		}
		
		//Prohibited Operating Zones Penalty Calculation
		for(int i=0; i<x.length; i++) {
		
			if(poZ1LowerLim[i]<x[i]&&poZ1UpperLim[i]>x[i])
				pozPenality+=Math.min(x[i]-poZ1LowerLim[i], poZ1UpperLim[i]-x[i]);
			
			if(poZ2LowerLim[i]<x[i]&&poZ2UpperLim[i]>x[i])
				pozPenality+=Math.min(x[i]-poZ2LowerLim[i], poZ2UpperLim[i]-x[i]);
			
			if(poZ3LowerLim[i]<x[i]&&poZ3UpperLim[i]>x[i])
				pozPenality+=Math.min(x[i]-poZ3LowerLim[i], poZ3UpperLim[i]-x[i]);
		}
		
		for(int i=0; i<x.length; i++) {
			currentCost+= a[i]*Math.pow(x[i],2)+b[i]*x[i]+c[i]
					+Math.abs(e[i]*Math.sin(f[i]*(pMin[i]-x[i])));;
		}
	
	
		double penalty = 1e7*powerBalancePenalty + 1e5*capacityLimitsPenalty 
				+ 1e7*rampLimitPenalty + 1e5*pozPenality;
		
		return currentCost+penalty;
	}

	
	
	private double[][] generateBounds(int probDim)
	{
		double[][] bounds = new double[probDim][2];
		
		for(int i=0; i<probDim; i++) {
			bounds[i][0] = pMin[i];
			bounds[i][1] = pMax[i];
		}
				
		return bounds;
	}

}
