package test;

import java.util.Vector;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

import org.apache.commons.math3.stat.inference.MannWhitneyUTest;
import static algorithms.utils.AlgorithmUtils.generateRandomSolution;
import test.TestOptimizerHelper.CEC2014;
import test.TestOptimizerHelper.SISC2010;
import test.TestOptimizerHelper.CEC2005;
import utils.MathUtils;
import algorithms.NelderMead;
import algorithms.Powell;
import algorithms.Rosenbrock;
import algorithms.SteepestDescent;
import algorithms.ISPO;
import algorithms.RandomSteepestDescent;
import algorithms.interfaces.Algorithm;
import algorithms.interfaces.Problem;
import algorithms.utils.Best;

public class TestMovesAxes
{
	// number of repetitions and budget factor
	static int nrRepetitions = 10;
	static int budgetFactor = 2000;
	static int problemDimension = 10;

	static boolean save = true;
	static boolean showPValue = false;
	static String Dir = "/home/facaraff/Dropbox/along_axes/"; 
	
	public static void main(String[] args) throws Exception
	{
		
		// run the optimization algorithm
		Vector<Algorithm> algorithms = new Vector<Algorithm>();
		Vector<Problem> problems = new Vector<Problem>();

		Algorithm a;
		Problem p;

		double[] bias = null;

		a = new SteepestDescent();
		a.pushParameter("p0",0.5);
		algorithms.add(a);

//		a = new SteepestDescent();
//		a.pushParameter("p0",-1.0);
//		algorithms.add(a);


		a = new RandomSteepestDescent();
		a.pushParameter("p0", 0.5);
		algorithms.add(a);
		
		

		// initialize local search methods
		a = new Powell();
		a.pushParameter("p0",-1.0); // purposely set a negative tolerance
		a.pushParameter("p1",100.0);
		algorithms.add(a);
		
		a = new Rosenbrock();
		a.pushParameter("p0",10e-5);
		a.pushParameter("p1",2.0);
		a.pushParameter("p2",0.5);
		algorithms.add(a);
		
		a = new NelderMead();
		a.pushParameter("p0", 1.0);
		a.pushParameter("p1", 0.5);
		a.pushParameter("p2", 2.0);
		a.pushParameter("p3", 0.5);
		algorithms.add(a);
		
		a = new ISPO();
		a.pushParameter("p0", 1.0);
		a.pushParameter("p1", 10.0);
		a.pushParameter("p2", 2.0);
		a.pushParameter("p3", 4.0);
		a.pushParameter("p4", 1e-5);
		a.pushParameter("p5", 30.0);
		algorithms.add(a);

		
		/*
		// BBOB 2010
		bias = new double[] {79.48, -209.88, -462.09, -462.09, -9.21, 35.9, 
								92.94, 149.15, 123.83, -54.94, 76.27, -621.11, 
								29.97, -52.35, 1000.0, 71.35, -16.94, -16.94,
								-102.55, -546.5, 40.78, -1000.0, 6.87, 102.61};
		for (int i = 0; i < 24; i++)
		{
			double[] bounds;
			if ((i <= 1) || (i == 3) || (i == 4) || (i == 6)|| (i == 7)|| (i == 8)|| (i == 9) || 
				(i == 11) || (i == 12) || (i == 13) || (i == 14) || (i >= 16))
				bounds = new double[] {-5, 5};
			else
				bounds = new double[] {-32, 32};


			p = new BBOB10(i+1, problemDimension, bounds);
			problems.add(p);

			//p.f(AlgorithmUtils.generateRandomSolution(bounds, problemDim));
			//double precision = 1e-8; // see DefaultParam in fgeneric.c
			//System.out.println((i+1) + "\t" + (BenchmarkBBOB2010.getJNIfgeneric().getFtarget()-precision));
			//BenchmarkBBOB2010.finalizeBBOB();
		}
		*/
/*
		
		// CEC 2005
		bias = new double[] {-450, -450, -450, -450, -310, 390, -180, -140, -330, -330, 
				90, -460, -130, -300, 120, 120, 120, 10, 10, 10, 
				360, 360, 360, 260, 260};
		for (int i = 1; i <= 25; i++)
		{
			double[] bounds;
			if ((i <= 6) || (i == 14))
				bounds = new double[] {-100, 100};
			else if (i == 7)
				bounds = new double[] {0, 600};
			else if (i == 8)
				bounds = new double[] {-32, 32};
			else if (i == 11)
				bounds = new double[] {-0.5, 0.5};
			else if (i == 12)
				bounds = new double[] {-Math.PI, Math.PI};
			else if (i == 13)
				bounds = new double[] {-5, 5}; //XXX (gio) {-3,1} in Suganthan's code, {-5,5} in report
			else if (i == 25)
				bounds = new double[] {2, 5};
			else
				bounds = new double[] {-5, 5};
			p = new CEC2005(i, problemDimension, bounds);
			problems.add(p);
		}
*/

		
		// SISC 2010
		bias = new double[] {-450.0, -450.0, 390.0, -330.0, -180.0, -140.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
		for (int i = 1; i <= 19; i++)
		{
			double[] bounds;
			if ((i == 18) || (i == 14) || (i == 4))
				bounds = new double[] {-5, 5};
			else if ((i == 5))
				bounds = new double[] {-600, 600};
			else if ((i == 6))
				bounds = new double[] {-32, 32};
			else if ((i == 7) || (i == 19) || (i == 15))
				bounds = new double[] {-10, 10};
			else if ((i == 8))
				bounds = new double[] {-65.536, 65.536};
			else if ((i == 10))
				bounds = new double[] {-15, 15};
			else 
				bounds = new double[] {-100, 100};
			p = new SISC2010(i, problemDimension, bounds);
			problems.add(p);
		}
	
		
		/*
		// CEC 2013
		bias = new double[] {-1400, -1300, -1200, -1100, -1000, -900, -800, 
				-700, -600, -500, -400, -300, -200, -100, 
				100, 200, 300, 400, 500, 600, 700, 
				800, 900, 1000, 1100, 1200, 1300, 1400};
		for (int i = 1; i <= 28; i++)
		{
			double[] bounds = {-100, 100};
			p = new CEC2013(i, problemDimension, bounds);
			problems.add(p);
		}
		*/
		/*
		// CEC 2014
		bias = new double[30];
		for (int i = 1; i <= 30; i++)
		{
			bias[i-1] = i*100;
			double[] bounds = {-100, 100};
			p = new CEC2014(i, problemDimension, bounds);
			problems.add(p);
		}
*/
		int algorithmIndex = 0;
		for (Algorithm algorithm : algorithms)
		{
			System.out.print("" + "\t");
			String algName = algorithm.getClass().getSimpleName();
			if (algName.length() >= 8)
				System.out.print(algName + "\t");
			else
				System.out.print(algName + "\t\t");

			if (algorithmIndex > 0)
			{
				System.out.print("\t" + "W");
				if (showPValue)
					System.out.print("\t" + "p-value" + "\t");
			}
			algorithmIndex++;
		}
		System.out.println();

		double[][] finalValues;
		double[][] finalV;
		MannWhitneyUTest mannWhitneyUTest = new MannWhitneyUTest();
		
		double[][] initialGuesses;
		double[] initialFitnesses;
		double[] delta;

		String ss = "";
		String s="Initial guesses:";
		File f = new File(Dir+"DATA/delta_detailed.txt");
		File ff = new File(Dir+"DATA/delta.txt");
		
		int problemIndex = 0;
		for (Problem problem: problems)
		{
			
			initialGuesses = new double[nrRepetitions][problemDimension];
			initialFitnesses = new double[nrRepetitions];
			delta = new double[algorithms.size()];
			
			System.out.print("f" + (problemIndex+1) + "\t");

			finalValues = new double[algorithms.size()][nrRepetitions];
			finalV = new double[algorithms.size()][nrRepetitions];
			algorithmIndex = 0;
			
			for(int g=0; g<nrRepetitions; g++)
			{
				initialGuesses[g] = generateRandomSolution(problem.getBounds(), problemDimension);
				initialFitnesses[g] = problem.f(initialGuesses[g]);
				if(save)s+="\n"+initialFitnesses[g];
			}
			double initialAVG = MathUtils.mean(initialFitnesses);
			if(save)s+="\nAVG initial Guess: "+initialAVG;
			
			for (Algorithm algorithm : algorithms)
			{
				if(save){ s+="\n\n"+algorithm.getClass().getSimpleName(); ss+="\n"+algorithm.getClass().getSimpleName()+"\t";}
				
				for (int i = 0; i < nrRepetitions; i++)
				{
					algorithm.setInitialSolution(initialGuesses[i]);
					algorithm.setInitialFitness(initialFitnesses[i]);
					double best = runAlgorithmRepetition(algorithm, problem, problemIndex+1, i);
					finalV[algorithmIndex][i] = best;
					if(save)s+="\n"+best;
					if (bias != null)
						finalValues[algorithmIndex][i] = best - bias[problemIndex];
					else
						finalValues[algorithmIndex][i] = best;				
				}
				
				double avg = MathUtils.mean(finalV[algorithmIndex]);
				if(save)s+="\n\nAVG = "+avg;
				delta[algorithmIndex] = initialAVG-avg;
				if(save){s+="\n\nDELTA = "+delta[algorithmIndex]; ss+=delta[algorithmIndex];}
				
				String mean = TestOptimizerHelper.format(MathUtils.mean(finalValues[algorithmIndex]));
				String std = TestOptimizerHelper.format(MathUtils.std(finalValues[algorithmIndex]));
				System.out.print(mean + " \u00B1 " + std + "\t");
				
				if (algorithmIndex > 0)
				{			
					double pValue = mannWhitneyUTest.mannWhitneyUTest(finalValues[0], finalValues[algorithmIndex]);
					char w = '=';
					if (pValue < 0.05)
					{
						if (MathUtils.mean(finalValues[0]) < MathUtils.mean(finalValues[algorithmIndex]))
							w = '+';
						else
							w = '-';
					}
					System.out.print(w + "\t");
					
					if (showPValue)
						System.out.print(TestOptimizerHelper.format(pValue) + "\t");
					
					//String w = TableAvgStdStat.compareResults(finalValues[0], finalValues[algorithmIndex], false, 0.05);
					//System.out.print(w + "\t");
				}
				algorithmIndex++;
			}
			
			if(save)
			{
				ss += "\n\n\n";
				
				if (!f.exists()) 
					f.createNewFile();
				FileWriter fw = new FileWriter(f.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(s);
				bw.close();
				if (!ff.exists()) 
					ff.createNewFile();
				fw = new FileWriter(ff.getAbsoluteFile());
				bw = new BufferedWriter(fw);
				bw.write(ss);
				bw.close();
			}
			
			System.out.println();
			System.out.print("\t("+delta[0]+")");
			System.out.print("\t("+delta[1]+")");
			for(int d=2; d<delta.length; d++)
			{
				System.out.print("\t\t("+delta[d]+")");
			}
				
			
			System.out.println();
			problemIndex++;
		}
		
	}




	private static double runAlgorithmRepetition(Algorithm algorithm, Problem problem, int probIndex, int run) throws Exception
	{
		//long t0, t1;
		//t0 = System.currentTimeMillis();
		Vector<Best> bests = algorithm.execute(problem, budgetFactor*problem.getDimension());
		//t1 = System.currentTimeMillis();
		//System.out.println("Elapsed time: " + (long)(t1-t0) + " ms.");	
		int n = bests.size();
		
		
		if (save)
		{
			//boolean succeed =false;
			String currentDir = Dir+"DATA/weber/"+algorithm.getClass().getSimpleName()+"/Darwin.Benchmark"+problem.getClass().getSimpleName()+".f"+probIndex+"-"+problemDimension+"/";
			new File(currentDir).mkdirs();
			//succeed = new File(currentDir).mkdirs();
			//if(!succeed)
				//System.out.println("ERROR"); 
		
			String fitTrend ="#EvaluationCount	Fitness";
					for (int j = 0; j < n; j++)
						fitTrend+="\n"+bests.get(j).getI() + "\t" + bests.get(j).getfBest();
			
			
			File file;
			if(run<=9)
				file = new File(currentDir+"run_0"+run+".txt");
			else
				file = new File(currentDir+"run_"+run+".txt");

			if (!file.exists()) 
				file.createNewFile();
			FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(fitTrend);
			bw.close();
			
							
			}
		
		
		
		
		return bests.get(n-1).getfBest();
	}
	
//	private void createFolders(String dir,Vector alg, Vector prob)
//	{
//		String weber = "DATA/row/";
//		
//		boolean succeed =false;
//		while(!succeed)
//			succeed = new File(dir+weber).mkdir();
//	}
	
	
}

